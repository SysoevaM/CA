# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrderLine(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, product_id: int=None, price: float=None, price_with_vat: float=None, quantity: int=None, discount: float=None):  # noqa: E501
        """OrderLine - a model defined in Swagger

        :param id: The id of this OrderLine.  # noqa: E501
        :type id: int
        :param product_id: The product_id of this OrderLine.  # noqa: E501
        :type product_id: int
        :param price: The price of this OrderLine.  # noqa: E501
        :type price: float
        :param price_with_vat: The price_with_vat of this OrderLine.  # noqa: E501
        :type price_with_vat: float
        :param quantity: The quantity of this OrderLine.  # noqa: E501
        :type quantity: int
        :param discount: The discount of this OrderLine.  # noqa: E501
        :type discount: float
        """
        self.swagger_types = {
            'id': int,
            'product_id': int,
            'price': float,
            'price_with_vat': float,
            'quantity': int,
            'discount': float
        }

        self.attribute_map = {
            'id': 'id',
            'product_id': 'productId',
            'price': 'price',
            'price_with_vat': 'priceWithVat',
            'quantity': 'quantity',
            'discount': 'discount'
        }

        self._id = id
        self._product_id = product_id
        self._price = price
        self._price_with_vat = price_with_vat
        self._quantity = quantity
        self._discount = discount

    @classmethod
    def from_dict(cls, dikt) -> 'OrderLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderLine of this OrderLine.  # noqa: E501
        :rtype: OrderLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this OrderLine.


        :return: The id of this OrderLine.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this OrderLine.


        :param id: The id of this OrderLine.
        :type id: int
        """

        self._id = id

    @property
    def product_id(self) -> int:
        """Gets the product_id of this OrderLine.


        :return: The product_id of this OrderLine.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this OrderLine.


        :param product_id: The product_id of this OrderLine.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def price(self) -> float:
        """Gets the price of this OrderLine.


        :return: The price of this OrderLine.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this OrderLine.


        :param price: The price of this OrderLine.
        :type price: float
        """

        self._price = price

    @property
    def price_with_vat(self) -> float:
        """Gets the price_with_vat of this OrderLine.


        :return: The price_with_vat of this OrderLine.
        :rtype: float
        """
        return self._price_with_vat

    @price_with_vat.setter
    def price_with_vat(self, price_with_vat: float):
        """Sets the price_with_vat of this OrderLine.


        :param price_with_vat: The price_with_vat of this OrderLine.
        :type price_with_vat: float
        """

        self._price_with_vat = price_with_vat

    @property
    def quantity(self) -> int:
        """Gets the quantity of this OrderLine.


        :return: The quantity of this OrderLine.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this OrderLine.


        :param quantity: The quantity of this OrderLine.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def discount(self) -> float:
        """Gets the discount of this OrderLine.


        :return: The discount of this OrderLine.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount: float):
        """Sets the discount of this OrderLine.


        :param discount: The discount of this OrderLine.
        :type discount: float
        """

        self._discount = discount
